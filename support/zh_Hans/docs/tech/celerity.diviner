@title Celerity 技术文档
@group celerity

Celerity 系统的技术概述。

= 概述 =

Celerity是一个静态资源（ CSS 和 JS ）管理系统，它处理：

  - 跟踪页面需要的资源。
  - 生成浏览器访问资源的 URI。
  - 管理资源之间的依赖关系。
  - 打包资源，减少 HTTP 请求提高性能。
  - 资源预处理（例如，删除注释和空格）。
  - 分发资源和管理资源缓存生命周期。
  - 与客户端交互管理资源。

Celerity 是基于 Facebook 的 //Haste// 系统上的产物。 
你可以在这里找到更多关于 Celerity 的信息：


  - @{article:Things You Should Do Soon: Static Resources} 
  	描述了此系统的历史和上下文以及它要解决的问题。
  - @{article:Adding New CSS and JS} 提供了使用 Celerity 的开发人员指南。

= Class 关系 =

Celerity 的主要 API 是 @{function:require_celerity_resource}，
它标记了在渲染响应时（例如，在生成 HTML 页面或在构建对 Ajax 请求的响应时）所包含的资源。 
例如，如果你使用像 "widget-view" 这样的CSS类，你必须在网站调用 
`require_celerity_resource('widget-view-css')` (或类似）以确保包含必要的 CSS。

此函数使用 @{class:CelerityAPI} 访问进行中的 @{class:CelerityStaticResourceResponse}，
并告知它需要在实际构建响应时包含的资源。
(This layer of
indirection provides future-proofing against certain complex situations Facebook
eventually encountered).

当渲染响应时，页面渲染器使用 @{class:CelerityAPI} 访问进行中的
@{class:CelerityStaticResourceResponse}，
并请求它对引用的 CSS 和 JS 资源进行渲染。 
它使用 @{class:CelerityResourceMap} 来确定所请求资源的依赖关系
（所以你只需要显式包含你实际使用的内容，而不是所有的依赖关系）和
打包规则（因此它可以生成更少的资源请求，以提高性能）。 
然后生成 `<script />` 和 `<link />` 引用这些资源。

这些引用指向由 @{class:CelerityResourceController} 处理的 `/res/` URI。 
它响应这些请求并提供相关资源和包，管理缓存生命周期和执行任何必要的预处理。 
使用 @{class:CelerityResourceMap} 来定位资源和读取打包规则。

`bin/celerity map` 生成依赖关系和打包映射，并更新到 `resources/celerity/map.php` 文件中。

@{class:CelerityStaticResourceResponse} 还管理一些 Javelin 信息，
@{function:celerity_generate_unique_node_id} 使用此元数据在生成唯一节点 ID 时提供更好的唯一性保证。
