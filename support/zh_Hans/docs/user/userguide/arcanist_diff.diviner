@title Arcanist 用户指南: arc diff
@group userguide

运行 `arc diff` 的指南，将更改发送到 Differential 进行审核。

本文假设您已安装并能够运行 `arc` ; 如果没有，见
@{article:Arcanist 用户指南} 帮助设置它。

在运行 `arc diff` 之前，你应该创建一个 `.arcconfig` 文件。
这个文件应该有人已经帮你建好了。 
有关说明和信息，请参阅 @{article:Arcanist 用户指南: 配置新项目}。

= 概览 =

虽然 `arc` 有大量与各种 Phabricator 应用程序接口交互的命令，
但 `arc` 的主要用途是发送修改到 Differential 以供审核
（ 有关 Differential 的更多信息，请参阅 @{article:Differential 用户指南}）。 
如果你不熟悉 Differential，最好先阅读这篇文章，大概了解下代码审查工作流程。

您通过运行 `arc diff' 可以发送更改以供审核。本文档的其余部分
解释了如何使用 `arc diff'，以及整个审核工作流程如何用于
不同版本控制系统。

= Subversion =

在 Subversion 中，`arc diff` 将发送**工作副本中未提交的修改** 进行审核。

要在 SVN 中**创建修订版**，运行：

  $ nano source_code.c # 进行修改
  $ arc diff

这将提示您提供有关修订的信息。 
要稍后**更新现有的修订版**，只需执行相同的操作：

  $ nano source_code.c # 进一步修改
  $ arc diff

这一次，`arc` 将提示您更新修订版本。
一旦您的修订版本被接受，您可以这样提交：

  $ arc commit

= Git =

在 Git 中，`arc diff` 将发送 **指定范围内的所有提交** 进行审核。 
默认情况下，此范围是：

  `git merge-base origin/master HEAD`..HEAD

此范围的意思即“当前分支尚未推送的所有提交”。
所以，要在 Git 中**创建修订**，运行：

  $ nano source_code.c  # 进行修改
  $ git commit -a       # 提交修改
  $ arc diff            # 从此分支上的所有未提交的提交中创建新的修订版本。

`git commit` 步骤是可选的。 
如果工作副本中有未提交的更改，那么 Arcanist 会要求您从它们创建提交。

由于它使用分支上的**全部**提交，因此如果您愿意，可以在发送更改之前进行多次提交。

您可以通过运行以下命令来指定不同的提交范围：

  $ arc diff <commit>

这意味着使用范围：

  `git merge-base <commit> HEAD`..HEAD

然而，这是相对高级的功能。 
如果您不是创建基于分支的分支，远程分支等等，默认范围通常是正确的。

要**更新修订**，只需执行相同的操作：

  $ nano source_code.c  # 进一步修改
  $ git commit -a       # 提交修改
  $ arc diff            # 这将提示您更新修订版本信息。

`git commit` 步骤是可选的。 
如果工作副本中有未提交的更改，那么 Arcanist 会要求您将其修改为提交。

当您的修订被接受时，您通常可以这样推送它：

  $ arc land <branch>   # 将 <branch> 合并到 master，然后推送.

arc land` 对你的工作流做了一些假设，这可能和实际情况不符。
在使用之前请查阅文档。你也应该看看 `arc amend'，
这可能更适合您的工作流程。

= Mercurial =

在 Mercurial 中，`arc diff` 发送**指定范围内的所有提交**以供审核。 
默认情况下，此范围是在历史记录中的任何修订版本
的第一个未发布（non-outgoing）父目录和目录状态之间更改。 
这其实是指 “从上次合并以来的每一个发布的变化”。 
它包括工作副本中的任何未提交的更改，但将提示您包括这些更改。

要在 Mercurial 中**创建修订版**，请运行：

  $ nano source_code.c  # 进行修改
  $ hg commit           # 提交修改
  $ arc diff            # Creates a new revision out of ALL outgoing commits
                        # on this branch since the last merge.

`hg commit` 步骤是可选的。 如果工作副本中有未提交的更改，
那么 Arcanist 会要求您从它们创建提交。

由于它使用在分支上的**全部**传出提交，
如果您愿意可以在发送您的更改之前进行多个提交。

您可以通过运行以下命令来指定不同的提交范围：

  $ arc diff <commit>

这意味着使用从该提交到目录状态的范围。 
但是，这是一个高级功能，默认范围通常是正确的。

要**更新修订**，只需执行相同的操作：

  $ nano source_code.c  # 进行修改
  $ hg commit           # 提交修改
  $ arc diff            # 这将提示您更新修订版本信息。

`hg commit`步骤是可选的。 如果工作副本中有未提交的更改，
那么 Arcanist 会要求您从中创建提交（如果支持，则将其修改为先前的提交）。

当您的修订版本被接受后，正常推送即可。 
（`arc` 没有在 Mercurial 中的集成 push 操作，
因为它不能强制合并，所以无法保证它能够做任何有用的事情。）

= 推送和关闭修订 =

接受更改后，您通常会推送它们并关闭修订版本。 
`arc` 有几个工作流程可以帮助完成这些操作：

  - 压缩或合并从特征分支到主分支（如果相关）的变化;
  - 使用来自 Differential 的所有信息格式化以提供一个好的提交信息; 和
  - 自动关闭修订。

您也可以不使用这些工作流程：您可以运行 `git push`，`hg push` 或 `svn commit`，
然后从网页上手动关闭修订版本。 但是，这些工作流可以使常见的开发操作更方便，
并在代码库中为您提供更好的提交消息。 `arc` 支持工作流有：

  - `arc land`: 在 Git 中工作，如果你在特性分支中开发。 
    将特性分支合并或压缩合并到某个主分支中，提供详细的提交消息，
	推送 master 分支，然后删除您的分支。
  - `arc amend`: 在Git中工作，如果你不能使用 `arc land`。 
  	使用详细的提交消息修改 HEAD 提交。
  - `arc commit`: 在 Subversion 中工作。 使用详细的提交消息运行 `svn commit`。
  - `arc close-revision`: 在任何地方都可以工作，从 CLI 关闭修订，而不是通过网页界面。

你可以使用 `arc help <command>` 来获取这些命令的详细帮助。 
Differential 将猜测接受的修订版本接下来需要的步骤，
但它可能不是您的工作流程的最佳的下一步。

如果更改被推送到 Diffusion 所跟踪的代码库，Phabricator 也将自动关闭修订。 
具体来说，它将根据提交和目录树哈希值以及提交消息中的 `Differential Revision` 标识符关闭修订。 
（您可以通过禁用代码库配置中的“自动关闭”来禁用此功能。）

如果你推送到一个未跟踪的代码库（或 `arc` 不能弄清它是否被跟踪），
`arc land`，`arc amend` 和 `arc commit` 将隐式运行 `arc close-revision`。

= 一般信息 =

此信息不是特定版本控制系统所特有的。

== 仅使用 Diff  ==

你可以使用 `--preview`（或 `--only`， 但是这会禁用其他特性）创建一个 diff（而不是修订），
您可以稍后使用它从网页上创建或更新修订版本。


== 其他 Diff 源 ==

你可以通过使用 `--raw` 参数，从任意补丁文件或标准输入管道创建 diff 。 
在大多数情况下，这只会创建一个 diff，而不是一个修订。 
您可以使用网页界面从该 diff 创建修订版本，或更新现有修订版本。


== 强制创建或更新 ==

`arc` 使用有关工作副本的信息（如路径，分支名称，
本地提交哈希值和本地树哈希值，具体取决于您使用的版本控制系统），
以确定您是要创建还是更新修订版本。 
如果猜测不正确，您可以强制它创建或更新修订版本：

  $ arc diff --create             # 强制 "创建".
  $ arc diff --update <revision>  # 强制 "更新".

`arc which` 可以帮助找出工作副本所属的仓库。
