@title 用户指南: UTF-8 和 字符编码
@group userguide

Phabricator 如何处理字符编码。

= 概览 =

Phabricator 使用 UTF-8 编码处理内部数据的存储、处理和输出，并期望所有输入为 UTF-8 编码。
原则上，这意味着您应该使用 UTF-8 编写源代码。 
在大多数情况下，这不需要您修改任何内容，因为 ASCII 文本是 UTF-8 的子集。

如果您有一个源文件不是 UTF-8 编码的代码仓库，您有两个选项：

  - 将代码仓库中的所有文件转换为 ASCII 或 UTF-8 编码（请参阅下文的“检测和修复文件”）。 
  	推荐您这样做，特别是如果编码问题是偶然的。
  - 配置 Phabricator 将文件转换为 UTF-8，无论您的存储库需要什么编码（见下面的“支持备用编码”）。 
    这并不是完全支持的，并且不支持具有多个不同编码文件的仓库。

= 检测和修复文件 =

建议您只使用 ASCII 文本编写源文件，但 Phabricator 完全支持 UTF-8 源文件。

如果你有一个项目不是有效的 UTF-8 编码，因为一些文件中有随机的二进制字符，
libphutil 中有一个脚本可以帮助你识别和修复它们：


  project/ $ libphutil/scripts/utils/utf8.php

通常，使用 "-t" 在所有源文件上运行此脚本以查找具有错误字节范围的文件，
然后去掉 "-t" 参数在每个文件上运行它来标识存在问题的位置。 例如：

  project/ $ find . -type f -name '*.c' -print0 | xargs -0 -n256 ./utf8 -t
  ./hello_world.c

如果此脚本退出而没有输出，那么您没有编码问题，并且标识的所有文件都是有效的 UTF-8 文件。 
如果它发现了一些问题，你需要修复它们。 您可以通过省略“-t”标志来识别特定问题：


  project/ $ ./utf8.php hello_world.c
  FAIL  hello_world.c

    3  main()
    4  {
    5      printf ("Hello World<0xE9><0xD6>!\n");
    6  }
    7

这显示在第5行上有违规字节（在实际控制台显示中，它们将突出显示）。 
通常代码库都是有效的 UTF-8 编码，但有一些分散的文件，其中有其他东西，例如卷曲引号，
有人从 Word 粘贴到评论。 在这些情况下，您可以轻松地手动识别和解决这些问题。

如果您的源代码中有大量的 UTF-8 编码问题，Phabricator 没有提供
可以帮助您以系统的方式处理它们的任何默认工具。你可以将 `utf8.php` 作为起点，
或者使用其他工具批量处理你的源文件。

= 支持其他编码 =

Phabricator 对 UTF-8 以外的编码有一些支持。

NOTE: 不完全支持备用编码，一些功能将无法正常工作。 
不支持具有多种不同编码（例如，有些文件是 ISO-8859-1 编码 和 有些是 Shift-JIS 编码）文件的代码库。

要使用备用编码，请在 Diffusion 中编辑代码仓库，并指定要使用的编码。

可选地，您可以在运行 `arc` 时使用 `--encoding` 标志，或在 `.arcconfig` 中设置 `encoding` 
来指定编码。
