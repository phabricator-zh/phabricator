@title 审计用户指南
@group userguide

Audit 代码审计（推送后代码审查）工具和工作流程指南。

= 概览 =

Phabricator 支持两个代码审查工作流程，“审查”（推送前）和“审计”（推送后）。 
要了解两者之间的区别，请参见 @{article:用户手册: 代码审查和审计}。

本文档总结了由 //Audit// 工具实现的推送后 “审计” 工作流。

= 审计是怎样工作的 =

使用审计允许您直接推送和部署代码，而无需等待代码审查完成。 
审计工具主要保持跟踪两件事：

  - **提交** 以及它们的审计状态 (如 "未审计", "已批准", 或者 "提出疑虑")。
  - **审计请求** 请求用户 (或其他实体) 审计提交。
  	 可以通过多种方式触发 (查看下文)。

在审核工具的主页和首页上，您可以看到需要您采取行动的提交和请求：

  - **必需审核** 是要求您、您所参与的项目或者您所拥有的包进行审计的请求。 
  	审核请求在您批准相关提交时关闭。
  - *问题提交**是您撰写的提交，有人在审核中提出了疑虑。 
    当您满足了所有审核员的要求并获得了“批准”时，问题提交就会消失。

举例:

  - Evan 创建了提交 `abcdef1234` ，并推送到了远端服务器
  - 通过某种机制（查看下文对触发机制的描述）触发了对 Bob 审计请求。
  - 稍后，Bob 登录 Phabricator 后，在自己的首页看到了此审计请求。
  - Bob 点击查验了此提交。他注意到了一个问题，选择 “提出疑虑” 选项，并在评论中描述了问题。
  - Evan 收到了 Bob 提出疑虑的邮件。他选择不立即处理它。
  - 稍后， Evan 登录 Phabricator，在自己的首页的 “问题提交” 中看了此提交。
  - Evan 以某种方式解决了问题（例如，通过与 Bob 讨论，或者在另一个提交中修复了它）。
  - Bob 很满意，并“接受”了原来的提交。
  - 这导致请求从 Bob 的队列中消失，提交从 Evan 的队列中消失。

= 审计触发器 =

审核请求可以通过多种方式触发：

  - 如果您在提交消息中插入 `Auditors: username1, username2` ，
  	那么当您将它推送到跟踪分支时，它会向这些用户发送审核请求。
  - 您可以在 Herald 中创建根据提交的属性（如修改的文件，更改的文本，作者等）触发审核的规则。
  - 您可以通过在任意提交添加评论来进行审计。
  - 您可以创建一个 Owners 包，选择 “启用审计”。这是一个高级功能，只有非常大的团队才可能用到。

= 小团队中的审计 =

如果你有一个小团队，并且不需要复杂的触发规则，你可以设置一个简单的审计工作流程：

  - 创建一个新项目 “代码审计” 
  - 为提交创建一个新的全局 Herald 规则，对于没有 “Differential 修订”的每个提交，
  	触发由 “代码审计” 项目进行的审计（这将允许您部分或全部转换成审查）。
  - 让所有的工程师加入到 “代码审计” 项目。

这样，每个人都将看到每个提交的审计请求，但如果有人批准了它，请求将会消失。 
实际上，这强制实现了 “每个提交都应该//有人//检查” 的规则。

一旦您的团队规模扩大，您可以优化此规则集，以便开发人员只看到与他们相关的更改。

= 审计建议 =

  - 查看提交时，将突出显示您负责的审核请求相关的提交。 
  	如果请求是用户请求并且您是该用户，或者是项目请求并且是项目成员，
	或者是包请求并且您是包所有者，则您需要对该请求负责。 
	您采取的任何操作都会更新您负责的请求的状态。
  - 您可以通过单击差异对比中的行号留下内嵌评论。
  - 您可以通过拖动行号跨多行留下评论。
  - 内嵌评论开始会保存为草稿。 只有当您在网页底部提交评论时，它们才会被提交。
  - 按 "?" 查看快捷键

= 下一步 =

  - 通过 @{article:Herald User Guide} 了解有关 Herald 的更多信息。
