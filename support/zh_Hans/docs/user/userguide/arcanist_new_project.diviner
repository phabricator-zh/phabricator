@title Arcanist 用户指南: 配置新项目
@group userguide

解释如何使用 `.arcconfig` 文件配置 Arcanist 项目。

= 概览 =

在大多数情况下，你不需要特别配置你的项目，就应该能够使用`arc`。 
如果要调整 `arc` 行为，可以在项目中创建 `.arcconfig` 文件以提供特定于项目的设置。

= .arcconfig 基础 =

`.arcconfig` 文件是一个放置在项目的根目录的 JSON 文件。

Arcanist 使用 `.arcconfig` 文件自定义一些它的行为。 
您可能要配置的第一件事是您的 Phabricator 安装的 URI。 
一个简单有效的文件看起来像这样：

  name=.arcconfig
  {
    "phabricator.uri" : "https://phabricator.example.com/"
  }

有关可用选项的详细信息，请参见下文。

NOTE: 你应该把你的 `.arcconfig` 文件提交到代码库！
因为它包含的是项目配置，而不是用户配置。

= .arcconfig 进阶 =

常见选项有：

  - **phabricator.uri**:安装 Phabricator 的 URI，
  	在此项目中 `arc` 运行时应该连接的 URI。此选项以前被称为 “conduit_uri”。
  - **repository.callsign**: 此存储库在 “Diffusion” 中的代号。 
  	通常，`arc` 可以自动检测，但是如果它不能检测出来，你可以明确地指定它。 
	使用 `arc which` 来了解检测过程。
  - **history.immutable**: 配置` arc` 以使用不会在工作副本中重写历史记录的工作流。 
  	默认情况下，`arc` 将在 Git 中的一些工作流上对未发布的历史进行重写（
	修改提交消息，压缩合并）。区别将在下文详细描述。

其他选项包括:

  - **load**: 
  	在启动时加载的其他 Phutil 库列表。有关路径解析的详细信息，
	请参阅下文，或参阅 @{article@phabcontrib:Adding New Classes} 
	了解 libphutil 库的基本介绍。
  - **https.cabundle**: 指定在进行 HTTPS 连接时使用的备用证书包的路径。
  - **lint.engine**: @{class@arcanist:ArcanistLintEngine} 子类的名称，
  	用于将 lint 规则应用于此项目。参见 @{article:Arcanist 用户指南: Lint}。
  - **unit.engine**: @{class@arcanist:ArcanistUnitTestEngine} 子类的名称，
  	用于将单元测试规则应用于此项目。参见 @{article:Arcanist 用户指南: 自定义 Lint，单元测试和工作流}。

支持这些选项，但不建议使用它们：

  - **http.basicauth.user**: 指定在连接到 Phabricator 时使用的 HTTP 基本认证的用户名。
  - **http.basicauth.pass**: 指定在连接到 Phabricator 时使用的 HTTP 基本认证的密码。
  - **https.blindly-trust-domains**: 即 在 HTTPS 连接遇到证书无效时所信任的域的列表。 
    这是对证书有效性问题的强力解决方案，不鼓励这样操作，应使用有效的证书。

有关选项的完整列表，请运行 `arc get-config'。 
虽然所有选项都可以在 `.arcconfig` 中设置，但某些选项（比如 `editor` ）
通常没有意义，因为它们可能会因用户而异。

= 历史记录可变性 =

Arcanist 工作流以两种宽泛的模式运行：历史记录//可变//或//不可变//。 
在//可变// 模式下，`arc` 命令可以重写工作副本历史; 
在 //不可变// 模式下，他们不会重写工作副本历史。

您可以通过在配置中将 `history.immutable` 设置为 `true` 或 `false` 来控制历史记录可变性。 
默认情况下，它在 Git（ 即 //可变//）中为 “false”，在 Mercurial 中为 “true”（即//不可变//）。 
以下部分说明这些设置如何影响工作流。

== 历史记录可变性: Git ==

在具有//可变// 历史记录的工作流中，您会重写本地历史记录。 
你在功能分支中进行开发，但在推送之前通过使用`git commit --amend`，
`git rebase -i` 或 'git merge --squash` 来压缩或修改。 
通常，远程中的一个想法（idea）由一个提交表示。

在具有//不可变//历史记录的工作流中，不会重写本地历史记录。 
你在功能分支进行开发，推送他们将会不压缩提交。 
你不使用 `git commit --amend` 或 `git rebase -i`。 
通常，远程中的一个想法（idea）由许多提交表示。


实际上，这些是不同配置之间的差异：

  - **可变**
    - `arc diff` 会提示你将 lint 修改添加到 HEAD 中。
    - `arc diff' 将在创建修订之后修改 HEAD 中的提交消息。
    - `arc land` 默认使用 `--squash` 策略
    - `arc amend` 将使用来自相应或指定的 Differential 修订的信息修改 HEAD 中的提交消息。
  - **不可变**
    - 发生 lint 修改时，`arc diff` 将终止。
    - `arc diff` 不会在创建修订之后修改 HEAD 中的提交消息。
    - `arc land` 默认使用 `--merge` 策略。
    - `arc amend` 将退出并显示错误信息。

== 历史记录可变性: Mercurial ==

在 2.2 版本之前，Mercurial 没有历史修改命令，因此此设置没有效果。 
使用 Mercurial 2.2 或更新版本，使历史记录//可变//意味着：

  - **可变** ( 2.2 和 之后版本)
    - `arc diff` 将在创建修订之后修改`.` 中的提交消息。
    - `arc amend' 将使用相应或指定的 Differential 修订中的信息修改 `.` 中的提交消息。
  - **不可变** ( 2.2 之前版本)
    - `arc diff` 不会在创建修订之后修改`.`中的提交消息。
    - `arc amend` 将退出并显示错误信息。

= 类库是如何定位的 =

如果指定要加载的外部库，如 “examplelib”，需使用如下所示的相对路径：

  {
    ...
    "load": [
      "examplelib/src"
    ],
    ...
  }

... arc通过尝试这些路径寻找它：

  - `path/to/root/examplelib/src/` 首先，arc 查看项目的根目录（ `.arcconfig` 所在的目录），
  	看看类库是否是项目的一部分。这使得很容易将项目特定的代码放在项目中。
  - `path/to/root/../examplelib/src/` 接下来，arc 查看类库是否在与项目根目录同级的兄弟目录中。
	如果你使用几个代码库，这使得很容易将所有的 `arc` 代码放在一个代码库中，
	并且只需在和其他存储库相同的目录中检查它。
  - `php/include/path/examplelib/src` 最后，arc 回到 PHP，
  	它将在 php.ini设置 `include_path` 路径中查找。
	这个允许您在某些全局位置安装类库。

你也可以提供绝对路径，如 `/var/arc/examplelib/src`，
但是这需要所有人都将类库安装到此目录。

NOTE: 指定包含 `__phutil_library_init__.php` 的目录的路径。 
例如，如果你的 init 文件在 `examplelib/src/__phutil_library_init__.php`，
指定 `examplelib/src`，而不是 `examplelib/`。

这里的基本意图是:

  - 将项目特定的代码放在项目的某个目录中，如 `support/arc/src/`。
  - 将共享代码（例如，强制执行的通用编码标准或单元测试的挂钩或其他）
  	放在单独的代码库中，并确保在其他代码库旁边。
  - 或者把一切放在标准位置，并添加到 `include_path`。 

= 无 .arcconfig 运行=

虽然你不设置 `.arcconfig`，也可以在任何 Git，Subversion 或 Mercurial 
工作副本运行 `arc` 命令，
但一些功能不会工作，除非你设置一个`.arcconfig` 文件。

没有 `.arcconfig`:

  - 您将需要使用 `arc set-config default <uri>` 设置默认 Phabricator URI，
  	或者在每次运行命令时使用 `--conduit-uri` 指定一个显式URI。
  - 你不能通过 arc 执行 linters ，除非你明确地通过 `--engine` 参数指明。
  - 即使使用 `--engine` 参数，你也将无法自定义某些 linter 参数。
  - 你不能通过 arc 执行单元测试 ，除非你明确地通过 `--engine` 参数指明。
  - 你不能通过 `arc diff` 触发 lint 和 单元测试。
  - 你不能将 Git 工作副本放入不可变的历史模式（见下文）。
  - 您将无法指定代码仓库编码。 如果你不通过 `-encoding` 指定，将假定为 UTF-8。
  - 您将无法向 arc 添加插件来修改现有工作流或添加新工作流。
  - 您将无法加载其他库，除非您用 `--load-phutil-library` 明确指定它们。
  - 允许用户单击 Differential 中的函数或类名并跳转到其定义的符号索引功能将不起作用。
  - `arc patch` 将无法检测到您正在对错误的项目应用更改。 
  - 在 Subversion 中，`arc` 将无法确定项目的规范根目录，
  	并且将假设它是工作目录（在 Subversion 1.7 之前的版本）或者检出的根目录（在1.7版本之后的Subversion中）。 
	这意味着 diff 中的文件的路径不会被锚定到同一个地方，并且将具有不同数量的路径上下文，
	这可能使审核人感到困惑；如果它们被应用于不同与他们生成的目录时将阻止补丁正确地应用。
  - 在 Subversion 中，`arc` 将无法预测你打算更新现有的修订; 
  	您必须明确地使用 `--update` 或 `--preview` 并通过 Web 界面附加 diff。

= 下一步 =

接下来:

  - 返回到 @{article:Arcanist 用户指南}.
