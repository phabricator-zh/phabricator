@title Diffusion 用户指南: 符号索引
@group userguide

配置和使用符号索引的 指南。

= 概览 =

Phabricator 可以维护一个符号索引，
它跟踪在代码库中定义的类和函数的位置。 
设置索引后，您可以使用索引执行以下操作：

  - 通过 ctrl+点击（Mac 上 cmd+点击）符号从 Differential 代码审查
  	和 Diffusion 代码浏览跳转到符号定义
  - 从快速搜索中搜索符号
  - 让 IRC 机器人回答像 “SomeClass 在哪里” 的问题

NOTE: 因为此功能依赖于语法高亮，所以对于某些语言，它将比其他语言工作的更好。 
目前工作最好的是 PHP，但你的旅途可能会因其他语言而有所不同。


= 填充索引 =

要填充索引，您需要编写一个脚本，在代码库中标识符号，并设置一个 cronjob，
将其输出管道：

  ./scripts/symbols/import_repository_symbols.php

Phabricator 包含一个脚本，可以识别 PHP 项目中的符号：

  ./scripts/symbols/generate_php_symbols.php

Phabricator 还包括一个脚本，可以识别任何编程语言中具有类和/或功能的符号，
并且由 Exuberant Ctags（http://ctags.sourceforge.net）支持：

  ./scripts/symbols/generate_ctags_symbols.php

如果你想从另一种语言中识别符号，你需要编写一个脚本，
它可以导出它们（例如，也许通过解析一个` ctags` 文件）。

脚本的输出格式应该每行一个符号：

  <context> <name> <type> <lang> <line> <path>

例如：

  ExampleClass exampleMethod function php 13 /src/classes/ExampleClass.php

上下文在广义上用来定义符号的范围或命名空间。 对于面向对象的语言，这可能是一个类名。 
具有该上下文的符号是类常量，方法，属性，嵌套类等。
当打印没有上下文的符号（例如那些全局定义的符号）时，
`<context>` 字段应该为空（即， 行应以空格开头）。

您的脚本应枚举项目中的所有符号，并提供从项目根（“.arcconfig” 所在目录）开始的路径，以“/”开头。

你可以看一下 `generate_php_symbols.php` 来获得一个例子，了解如何编写这样一个脚本，
并运行这个命令来查看它的输出：

  $ cd phabricator/
  $ find . -type f -name '*.php' | ./scripts/symbols/generate_php_symbols.php

要实际构建符号索引，请将此数据通过管道定向到 `import_repository_symbols.php` 脚本，
提供存储库呼号：

  $ ./scripts/symbols/import_repository_symbols.php REPO < symbols_data

然后设置一个 cronjob 运行这个脚本。

您可以通过使用 Conduit 方法 `diffusion.findsymbols` 查询符号来测试导入是否正常。 
一些功能（如该方法 和 IRC 机器人集成）将立即开始工作。其他将需要更多的配置。

= 高级配置 =

您可以通过打开 {nav Diffusion>选择存储库>编辑存储库>编辑符号} 来配置一些其他选项，填写以下字段：

  - **索引语言**: 填写您为其构建索引的所有语言。 您可以将此字段留空为“所有语言”。
  - **符号来源**: 如果此项目依赖于其他存储库，请添加其他应在此处查找符号的存储库。
  	 例如，Phabricator 列出了 “Arcanist” 和 “libphutil”，因为它使用了这些存储库中的类和函数。

== 外部符号 ==

通过 @{article@phabcontrib:Adding New Classes}，
你可以教 Phabricator 关于来自外部世界的符号。 
扩展 @{class:DiffusionExternalSymbolsSource}; 
加载后，您的新实现将在任何查询符号时使用。


查看 @{class:DiffusionPhpExternalSymbolsSource} 和
@{class:DiffusionPythonExternalSymbolsSource} 的实现示例。
