@title Differential 用户指南
@group userguide

Differential（推送前代码审查）工具和 工作流程指南。

= 概览 =

Phabricator 支持两种代码评审工作流程，“审查”（推送前）和
“审计”（推送后）。 要了解两者之间的差异，请参阅
@{article:用户手册: 代码审查和审计}。

本文档总结了通过 //Differential// 实现的推送前审查工作流。

= 审查是如何工作的 =

Phabricator 中的代码审查是一个轻量级的、基于 Web 的异步过程。 
如果你熟悉 GitHub，它类似于 “pull 请求” 的工作原理：

  - 作者准备对代码库进行的更改，然后将其发送以供审核。 
    他们指定他们想要审查的人（也可能会通知其他用户，请参阅下文）。 
	更改本身被称为 “Differential 修订”。
  - 审核人员会收到一封电子邮件，要求他们审核更改。
  - 审核者检查更改，并讨论，批准或请求进一步修改（例如，如果他们识别问题或错误）。
  - 作者对反馈进行响应，可能需要更新修改（例如，修复错误或解决问题）。
  - 一旦一切都满意，审核人员接受更改，作者将其推送到上游。

Differential 主页面显示两组修订版本：

  - **需要操作** 是指您是作者或审核人，需要您审核、修改、推送的修订。
  - **等待其他人** 是指您是作者或审核人，但需要其他人审核，修改或推送的修订。

= 创建修订 =

在 Differential 中创建修订版本的首选方法是使用`arc` (查看 @{article:Arcanist 用户指南})。 
您还可以从 Web 界面创建修订版本，方法是打开 Differential 页面，
点击 “创建修订版本” 按钮，然后粘贴 diff 。


= Herald 规则 =

如果您有兴趣跟踪代码库某些部分的更改
（例如，可能是对某个功能的修改、或用某个语言进行的修改、或只是对实习生有些不信任），
您可以写一个 Herald 规则，符合规则（如内容、作者、受影响的文件等）的任何修订
将自动抄送邮件通知你。


行内评论
===============

您可以通过单击行旁边的行号留下行内评论。 
有关深入了解行内评论的信息，
请参阅 @{article:Differential User Guide: Inline Comments}。


下一步
==========

接下来:

  - 通过 @{article:Differential User Guide: Inline Comments}
  	深入了解行内评论的细节; 或
  - 查看 @{article:Differential User Guide: FAQ} 阅读 FAQ ; 或
  - 通过 @{article:Differential User Guide: Large Changes} 学习处理大型变更集; 或
  - 通过 @{article:Differential User Guide: Test Plans} 学习测试计划; 或
  - 查看 @{article:Herald User Guide} 更多地了解 Herald 。
