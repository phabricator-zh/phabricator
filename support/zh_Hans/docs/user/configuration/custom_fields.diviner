@title 配置自定义字段
@group config

如何向支持自定义字段的应用程序 添加他们。

= 概览 =

几个 Phabricator 应用程序允许配置自定义字段。 这些
字段允许您向对象添加更多信息，在某些情况下重新排序
或删除内置字段。

例如，你可以使用自定义字段为任务添加 “估计时间” 字段，
为项目添加 “领导” 字段，或者为用户添加 “体恤尺寸” 字段。

当前支持自定义字段的程序:

| 应用程序 | 支持 |
|-------------|---------|
| Differential | 部分支持 |
| Diffusion | 有限支持 |
| Maniphest | 完全支持 |
| Owners | 完全支持 |
| People | 完全支持 |
| Projects | 完全支持 |

自定义字段可以出现在很多地方，支持搜索、编辑、和其他功能。

= 基本自定义字段 =

要开始使用自定义字段，您可以使用配置选择和
重新排序字段，并添加新的简单字段。

如果您不需要复杂的显示控件或复杂的验证，
这些简单的字段应该能覆盖大多数场景。 
它们允许您附加诸如字符串，数字和对象的下拉菜单的字段。


相关配置设置为:

| 程序 | 添加字段 | 选择字段 |
|-------------|------------|---------------|
| Differential | 计划中 | `differential.fields` |
| Diffusion | 计划中 | 计划中 |
| Maniphest | `maniphest.custom-field-definitions` | `maniphest.fields` |
| Owners | `owners.custom-field-definitions` | `owners.fields` |
| People | `user.custom-field-definitions` | `user.fields` |
| Projects | `projects.custom-field-definitions` | `projects.fields` |

添加字段时，您将指定一个JSON Blob（例如，用
`maniphest.custom-field-definitions`的值）：

  {
    "mycompany:estimated-hours": {
      "name": "Estimated Hours",
      "type": "int",
      "caption": "Estimated number of hours this will take.",
      "required": true
    },
    "mycompany:actual-hours": {
      "name": "Actual Hours",
      "type": "int",
      "caption": "Actual number of hours this took."
    },
    "mycompany:company-jobs": {
      "name": "Job Role",
      "type": "select",
      "options": {
        "mycompany:engineer": "Engineer",
        "mycompany:nonengineer": "Other"
      }
    },
    "mycompany:favorite-dinosaur": {
      "name": "Favorite Dinosaur",
      "type": "text"
    }
  }

然后，字段将显示在应用程序的配置选项中
（例如，在“maniphest.fields”中），
您可以启用，禁用或重新排序他们。


有关如何定义字段的详细信息，请参阅下一节。

= 自定义字段配置 =

使用配置选项如`maniphest.custom-field-definitions`定义自定义字段时，
这些可用选项：

  - **name**: 在编辑和详情界面上显示字段的标签。
  - **description**: 管理字段时显示的可选文本。
  - **type**: 字段类型。 支持的字段类型包括：
    - **int**: 整数, 呈现为文本字段。
    - **text**: 字符串, 呈现为文本字段。
    - **bool**: 布尔值, 呈现为文本字段。
    - **select**: 允许用户从几个由**options**定义的选项中进行选择
	，呈现为下拉列表。
    - **remarkup**: 允许用户输入标记的文本区域。
    - **users**: 允许输入多个用户。
    - **date**: 日期／时间选择器。
    - **header**: 呈现一个可视分隔线，您可以使用它来分组字段。
    - **link**: 允许用户输入链接的文本字段。
  - **edit**: 在应用程序的编辑界面上显示此字段（默认为`true`）。
  - **view**: 在应用程序的视图界面上显示此字段（默认为`true`）。 
  （注意：不显示空字段。）
  - **search**: 在应用程序的搜索界面上显示此字段，允许
	用户按字段值过滤对象。
  - **fulltext**: 将此字段中的文本作为对象的全局全文索引的一部分。 
    这允许用户通过使用全局搜索搜索字段的内容来查找对象。
  - **caption**: 要显示在字段下方的说明（可选）。
  - **required**: 如果用户必须提供值，则为true。
  - **options**: 如果类型是 **select**，以字典形式为下拉列表提供选项。
  - **default**: 字段默认值。
  - **strings**: 允许您基于字段类型覆盖特定字符串。 见下文。
  - **instructions**: 在编辑视图中显示在控件上方的可选文本块。
  - **placeholder**: 在文本框上显示的占位符文本。 
  	只支持在 text，int 和 remarkup 类型字段（可选）。
  - **copy**: 如果为true，则在使用另一个对象作为模板创建对象时，将复制此字段的值。

不同控件类型的 `strings` 支持不同字符串，它们是：

  - **bool**
    - **edit.checkbox** 编辑界面的文本，没有默认值。
    - **view.yes** 视图界面的文本，默认为“是”。
    - **search.default** 搜索界面的文本，默认为“（任何）”。
    - **search.require** 搜索界面的文本，默认为“需要”。

在内部，Phabricator 实现一些额外的自定义字段类型和选项。 
但这些不作为一般用途，并且容易突然更改，但为了完整性在此记录：

  - **Credentials**: 类型为“credential”的控件
  	允许在需要 `credential.provides'时选择一个 passphrase 凭证，
	以及创建`credential.type`的凭证。
  
  - **Datasource**: 类型为“datasource”的控件允许从任意数据源选择令牌
    ，用`datasource.class`和 `datasource.parameters`控制。

= 高级自定义字段 =

如果您希望自定义字段具有高级行为（复杂的呈现、
高级验证、复杂控制与其他系统交互等）
您可以通过扩展类添加自定义字段，并将其加入到 Phabricator。


NOTE: 这个 API 有点新，而且相当大。 你应该预想到
API 可能会发生变更，且需要在代码中进行少量更新。

为此，为你想要添加字段的应用程序扩展适当的 CustomField 类：

| 应用程序 | 扩展  |
|-------------|---------|
| Differential | @{class:DifferentialCustomField} |
| Diffusion | @{class:PhabricatorCommitCustomField} |
| Maniphest | @{class:ManiphestCustomField} |
| Owners | @{class:PhabricatorOwnersCustomField} |
| People | @{class:PhabricatorUserCustomField} |
| Projects | @{class:PhabricatorProjectCustomField} |

最简单的方式是将你的子类放在 `phabricator/src/extensions/`。
Phabricator 在开发模式中，类将立即出现子在界面上。在非开发模式下，
需要重启 Phabricator（需要帮助，查看@{article:重启 Phabricator} ）。


例如，这是一个向 Maniphest 添加自定义字段的简单模板：

  name=ExampleManiphestCustomField.php
  <?php

  final class ExampleCustomField extends ManiphestCustomField {

    public function getFieldKey() {
      return 'example:test';
    }

    public function shouldAppearInPropertyView() {
      return true;
    }

    public function renderPropertyViewLabel() {
      return pht('Example Custom Field');
    }

    public function renderPropertyViewValue(array $handles) {
      return phutil_tag(
        'h1',
        array(
          'style' => 'color: #ff00ff',
        ),
        pht('It worked!'));
    }

  }

概括的说，您可以通过覆盖更多的方法并实现它们来添加功能。 
许多本地字段是在自定义字段体系结构上实现的，了解他们是有用的。 
有关可用集成的详细信息，请参见应用程序的基类和 @{class: PhabricatorCustomField}。


= 下一步 =

接下来:

  - 在 @{article@phabcontrib:Adding New Classes} 学习
  	更多关于使用自定义代码扩展 Phabricator 的内容;
  - 或者，返回到 @{article: 配置向导}.
