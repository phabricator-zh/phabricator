@title 配置通知服务
@group config

通知服务 配置指南。

概览
========

默认情况下， Phabricator 通过邮件和程序内的通知来
发送事件（如用户新建任务和评论代码审查）信息。

也可以配置 Phabricator 当有事情发生或对象被更新时，在浏览器里弹出
消息提示来提供实时的消息通知。


设置实时通知:

  - 按下文描述配置启动通知服务器
  - 修改 `notification.servers` 配置指向通知服务器

本文详细描述了这一过程。

支持的浏览器
==================

支持 WebSockets 的浏览器都支持实时通知。 这包括
大多数现代浏览器（如 Chrome，Firefox，Safari 和 最新版本的IE浏览器）
和许多移动浏览器。

IE8 和 IE9 不支持 WebSockets, 所以它们不支持实时通知。


安装 Node 和 对应模块
===========================

通知服务器是用 Node.js 开发的，所以需要先安装 Node.js。

参照 [[ http://nodejs.org | nodejs.org ]] 安装 Node.js。

还需要为 Node 安装 `ws` 模块。需要安装在通知服务器所在目录：

  phabricator/ $ cd support/aphlict/server/
  phabricator/support/aphlict/server/ $ npm install ws

安装好  Node.js 和 `ws` 模块，就可以启动通知服务器了。

运行 Aphlict 服务器
==========================

安装 Node.js 后，可以通过 `bin/aphlict` 命令来管理通知服务器。
启动服务器：

  phabricator/ $ bin/aphlict start

默认情况下，服务器会监听 `22280` 端口。如果服务器上有防火墙（比如 EC2 上的安全组），
请确保流量可以到达服务器。

服务器配置信息放在配置文件中，和 Phabricator 的配置是分开的。
默认的配置文件在 `phabricator/conf/aphlict/aphlict.default.json`。

可以直接修改默认配置文件，也可以在同目录下将其复制为 
`aphlict.custom.json` 文件（如果存在，将使用这个文件），
或者通过 `--config` 参数显示地指定配置文件：

  phabricator/ $ bin/aphlict start --config path/to/config.json

配置文件的设置项目：

  - `servers`: //必填（列表类型）// 启动的服务器列表
  - `logs`: //可选（列表类型）// 写入日志列表
  - `cluster`: //可选（列表类型）// 集群列表，这个是个高级功能。
  - `pidfile`: //必填（字符串）// PID 文件路径
  - `memory.hint`: //可选（整数）// 通过 `--max-old-stack-size` 参数建议 node 
  	使用的内存大小。大部分情况下可以不指定。
  
服务器配置字段是一个对象，包含字段：  
  - `type`: //必填（字符串）// 服务器类型。可选值：`admin` 或 `client`。
  	 一般情况下每种需要启动一个。
  - `port`: //必填（整数）// 服务器监听端口。
  - `listen`: //可选（字符串）// 绑定的接口。默认
     `admin` 服务器绑定到 `127.0.0.1`（只有本机的其他服务可以连接），
	 而 `client` 服务器绑定到 `0.0.0.0` (所有客户端都可连接）.
  - `ssl.key`: //可选（字符串）// 在此端口使用 SSL 时 SSL key 文件路径。
  - `ssl.cert`: //可选（字符串）// // 在此端口使用 SSL 时 SSL 证书文件路径。
  - `ssl.chain`: //可选（字符串）// 在此端口使用 SSL 时 SSL 证书链文件路径。

`logs` 列表中每个日志是一个对象，包含的字段：

  - `path`: //必填（字符串）// 日志文件的路径

`cluster` 列表中条目是个对象，包含的字段:

  - `host`: //必填（字符串）// 主机地址.
  - `port`: //必填（整数）// 端口.
  - `protocol`: //必填（字符串）// 链接的协议, `"http"` 或 `"https"` 中的一个。

集群配置属于进阶话题，大部分安装可以忽略这部分。关于如何配置集群的更多信息
请查看 @{article:Clustering Introduction} 和 @{article:Cluster: Notifications}。

默认值适用于简单情况，在复制配置环境中运行时，可能需要调整它们。


配置 Phabricator
=======================

服务器启动后，通过配置 Phabricator 的 `notification.servers` 信息进行连接。
此配置项需要提供一组服务器供 Phabricator 交互。

一般情况下，需要列出一个 client 服务器，一个 admin 服务器，比如：

```lang=json
[
  {
    "type": "client",
    "host": "phabricator.mycompany.com",
    "port": 22280,
    "protocol": "https"
  },
  {
    "type": "admin",
    "host": "127.0.0.1",
    "port": 22281,
    "protocol": "http"
  }
]
```

这些设置指定了用户的浏览器要连接的服务。大部分时候，这些配置和 Aphlict 的配置相似。
然而，如果在流量到达 Aphlict 前使用了负载均衡器 或者设置 SSL，浏览器连接的服务
端口和协议可能和底层服务器的不同。


验证服务器状态
=======================

配置 `notification.servers` 后，导航到
{nav Config > Notification Servers} 确保这些设置可以正常工作。


故障排除
===============

可以在终端的前台运行 `aphlict` 命令来显示输出内容：

  phabricator/ $ ./bin/aphlict debug

因为通知服务器使用了 WebSockets ，浏览器的终端错误输出
可能有些可以帮助解决问题的信息。

服务器也会输出相关日志，默认存放在 `/var/log/aphlict.log`。
可以通过配置修改日志存放路径。日志中也可能有帮助解决问题的信息。

SSL 和 HTTPS
=============

如果安装 Phabricator 通过 HTTPS 提供服务， websockets 也需要使用 HTTPS。
浏览器在 HTTPS 页面下拒绝连接到 `ws://` 类的 websockets 。

如果客户端通过 HTTPS 连接到 Phabricator ， Phabricator 会自动从
`notification.servers` 配置中选择合适的 HTTPS 服务，同时要求
浏览器用 `wss://` 协议建立 websocket 连接。

这样做的最简单方式是，直接为 Aphlict 配置 SSL key 和证书，让她直接用 SSL。

不想这样做的话，有两种方式可选：

  - 使用兼容 websocket 的负载均衡器 运行 websocket，在那里提供 SSL 支持。
  - 和其他一样通过 `nginx` 运行 websocket 

有关更多详细信息，请参阅下一节。

通过负载均衡器提供 SSL 服务
====================================

如果想在通知服务器前通过负载均衡器提供 SSL 服务，步骤如下：

  - 将 `notification.servers` 指向负载均衡器或反向代理，协议设置为 `https`。
  - 在负载均衡或代理服务器上设置 SSL，将流量转发到 Aphlict 服务器。
  - 配置 Aphlict 通过 `http` 协议监听目标端口。

通过 Nginx 提供 SSL 服务
==========================

使用 `nginx` 可以在同样端口上像发送普通 HTTP 流量一样发送 websocket 流量，
此外 `nginx` 代理请求可以基于路径。

这要求使用 `nginx` 1.3 或更高版本。 参见`nginx`文档：

> http://nginx.com/blog/websocket-nginx/

虽然比较复杂，但是可以让你在不开新端口的情况下支持通知服务。


`nginx` 配置示例：

```lang=nginx, name=/etc/nginx/conf.d/connection_upgrade.conf
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}
```

```lang=nginx, name=/etc/nginx/conf.d/websocket_pool.conf
upstream websocket_pool {
    ip_hash;
    server 127.0.0.1:22280;
}
```

```lang=nginx, name=/etc/nginx/sites-enabled/phabricator.example.com.conf
server {
  server_name phabricator.example.com;
  root        /path/to/phabricator/webroot;

  // ...

  location = /ws/ {
    proxy_pass http://websocket_pool;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_read_timeout 999999999;
  }
}
```
使用此方式，需要进行其他的额外调整：

**Phabricator 配置**:  `notification.servers` 中的 `"client"` 
配置项调整如下：

  - 设置 `host` 为 Phabricator 所在主机
  - 设置 `port` 为标准的 HTTPS 端口 (一般为 `443`).
  - 设置 `protocol` 为 `"https"`.
  - 设置 `path` 为 `/ws/`, 需匹配 `nginx` 配置中的 `location` 项设置。


不需要调整 `"admin"` 服务器配置。

**Aphlict**: Aphlict 配置中的 `"client"` 服务配置项调整如下:

  - 不要设置任何的 `ssl.*` 配置项：`nginx` 会给 Aphlict 发送常规 HTTP 流量。
  - 可以将监听端口从 `0.0.0.0` 调整为 `127.0.0.1`，因为服务器不会再接受
    外部流量。
