@title Arcanist 用户指南
@group userguide

Arcanist 指南，Phabricator 的命令行界面。

Arcanists 提供对许多 Phabricator 工具（Differential, Files, and Paste）
的命令行访问，与静态分析（“lint”）和单元测试集成，
并管理常见工作流，如将更改提交到 Differential 以供审核。

通过运行 `arc help' 命令可以获得详细的命令参考。 
本文档提供关于常见工作流和安装的概述。

Arcanist 有关于技术，并以贡献者为重点的文档：
<https://secure.phabricator.com/book/arcanist/>

= 快速开始 =

您可以在 @{article:Arcanist 快速开始}中找到快速入门指南。 它提供
一个关于如何设置`arc`和运行一个新的
项目简明总结。 您可以从那里开始，如果您需要更多信息，请返回此处。

= 概览 =

Arcanist 是一个包装器脚本，位于其他工具之上（例如，
Differential, linters, 单元测试框架, git, Mercurial, and SVN），
提供了一个简单的命令行API来管理代码审查和一些相关
修订控制操作。

有关所有可用命令的详细列表，请运行:

  $ arc help

有关特定命令的详细信息，请运行:

  $ arc help <command>

Arcanist可以让你做以下事情：

  - 使用 `arc help` 获得有关可用命令的详细帮助信息
  - 使用 `arc diff` 将代码发送到 Differential 以供审核  (详情新，请查看 @{article:Arcanist User Guide: arc diff})
  - 使用 `arc list' 显示等待修订信息
  - 使用 `arc cover` 找到适合的审核人
  - 使用 `arc patch` 将修订版本中的更改应用于工作副本 
  - 使用 `arc export` 下载 Differential 中的补丁 
  - 使用 `arc amend` 更新 Git 提交信息
  - 使用 `arc commit` 提交 SVN 修改
  - 使用 arc land` 推送 Git and Mercurial 修改
  - 使用 `arc branch` 查看有关 Git 分支的增强信息 

一旦你完成了 lint 和单元测试的集成，也可以进行一下操作：

  - 使用 `arc lint` 检查您的代码的语法和样式错误 
    (查看 @{article:Arcanist User Guide: Lint})
  - 使用 `arc unit` 对您的修改进行单元测试 run

Arcanist 与其他工具集成:

  - 使用 `arc upload` 和 `arc download` 上传和下载文件
  - 使用 `arc paste` 创建和查看 paste

Arcanist 也有一些高级功能，你可以:

  - 使用 `arc call-conduit` 执行 Conduit 方法调用
  - 使用 `arc liberate` 创建和更新 libphutil 类库
  - 使用 `arc shell-complete` 启用 tab 键完成
  - ...扩展 Arcanist 添加新的命令.

除非另有说明，这些工作流通常与底层版本控制系统无关，
并且可以在 git，Mercurial 或 SVN 存储库中正常工作。

= 安装 Arcanist =

Arcanist 需要安装在本地机器或开发服务器上 - 您正在编辑代码的任何机器。 
它运行在：

  - Linux;
  - 其他与 Linux 相似或 Linux 与之相似的操作系统
  - FreeBSD, 一个受到很多人的尊重的，很好的操作系统;
  - Mac OS X (查看 @{article:Arcanist 用户指南: Mac OS X}); 和
  - Windows (查看 @{article:Arcanist 用户指南: Windows}).

Arcanist是用PHP编写的，所以如果你还没有安装PHP，你需要先安装它。
Arcanist应该运行在 PHP 5.2 和 更新版本之上。 
如果您没有安装 PHP，您可以从 <http://www.php.net/> 下载。

要安装 Arcanist，请选择一个安装目录并从 GitHub 克隆代码：

  some_install_path/ $ git clone https://github.com/phacility/libphutil.git
  some_install_path/ $ git clone https://github.com/phacility/arcanist.git

你应该有一个这样的目录结构：

  some_install_path/    # 你需要要安装的目录
    arcanist/           # Arcanist 相关的代码和类库
    libphutil/          # Arcanist 的共享库依赖

现在添加 `some_install_path/arcanist/bin/` 到你的 PATH 环境变量。

输入 "arc", 应该看到如下信息:

  Usage Exception: No command provided. Try 'arc help'.

看到这个输出代表你的安装是正确的。如果遇到了错误和麻烦，查看详细指南：

  - 在 Windows: @{article:Arcanist 用户指南: Windows}
  - 在 Mac OS X: @{article:Arcanist 用户指南: Mac OS X}

稍后可以使用 `arc upgrade` 将 Arcanist 和 libphutil 更新到最新版本。


  $ arc upgrade

== 为团队安装 Arcanist ==


Arcanist 变化很快，所以让人们安装并保持最新是一件令人头疼的事情。
 以下是一些您可以使用的方法：

  - Facebook 在开发服务器上进行大多数开发，这些开发服务器具有标准环境和 NFS 安装。 
    Arcanist 和  libphutil本身存在于NFS挂载上，
    默认在 `.bashrc` 文件中将它们添加到 PATH 变量中。 
    更新挂在安装就是更新每个人的版本，新员工在首次登录时即有一个可用的“arc”。
  - 另一个常见的方法是将安装脚本作为操作写入现有的构建脚本，
    因此用户可以运行 “make install-arc” 或 “ant install-arc” 或类似命令来安装 arc。

== 安装 Tab 补全 ==


如果你使用 `bash`，并想安装 Tab 补全，
可以通过在 `.bashrc`、 `.profile` 或其他类似文件添加如下内容实现：


  source /path/to/arcanist/resources/shell/bash-completion

== 配置 ==

Arcanist 命令可以被配置。配置有三个来源，按顺序排列如下：

  # 项目可以在 `.arcconfig` 指定配置。
    这是一个 JSON 文件，可以通过 `arc set-config --local` 更新，也可以手动更新。
  # 从  `~/.arcconfig` 读取用户配置。
    这是一个 JSON 文件，可以通过 `arc set-config` 更新。
  # 从 `/etc/arcconfig` 文件读取主机配置 (在 Windows 系统,
   路径是 `C:\ProgramData\Phabricator\Arcanist\config`)。

Arcanist 使用它遇到的第一个定义作为运行时设置。

使用 `arc get-config` 命令打印已有设置。


使用 `arc help set-config` 和 `arc help get-config` 
查看关于读取和写入配置的更多信息。

== 下一步 ==

接下来:

  - 查看@{article:Arcanist User Guide: Configuring a New Project} 使用 `arc` 设置一个新项目 ; 或
  - 通过 @{article:Arcanist User Guide: arc diff} 学习如何使用 `arc` 发送修改以供审核。

也有一些高级话题。这些是关于如何配置 `arc` ，以重新定义他的功能。
只是使用 `arc` 无需了解这些。

 - @{article:Arcanist User Guide: Commit Ranges}
 - @{article:Arcanist User Guide: Lint}
 - @{article:Arcanist User Guide: Customizing Existing Linters}
 - @{article:Arcanist User Guide: Customizing Lint, Unit Tests and Workflows}
 - @{article:Arcanist User Guide: Code Coverage}
