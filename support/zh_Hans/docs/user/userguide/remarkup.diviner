@title Remarkup 参考
@group userguide

解释如何制作粗体文本;  这使你的话更大声，所以你可以赢得争论。

= 概览 =

Phabricator 使用称为 “Remarkup” 的轻量级标记语言，类似于
其他轻量级标记语言，如 Markdown 和 Wiki 标记语言。

本文档描述了如何使用Remarkup格式化文本。

= 快速参考 =

下面会更详细地解释所有的语法，这是一个使用 Remarkup 格式化文本的快速指南。

这些是内联样式，并且可以应用于大多数文本：

  **bold** //italic// `monospaced` ##monospaced## ~~deleted~~ __underlined__
  !!highlighted!!
  D123 T123 rX123           # 链接到对象
  {D123} {T123}             # 链接到对象 (全名)
  {F123}                    # 嵌入图片
  {M123}                    # 嵌入 Pholio Mock
  @username                 # 提及用户
  #project                  # 提及项目
  [[wiki page]]             # 链接到 Phriction
  [[wiki page | name]]      # 命名链接到 Phriction
  http://xyz/               # 链接到网页
  [[http://xyz/ | name]]    # 命名链接到网页
  [name](http://xyz/)       # 备用链接

这些是块样式，并且必须通过空行与周围文本分隔开：

  = 大标题 =

  ==  小标题 ==

  ## 这也是一个标题

  这也是一个大标题
  ===================

  这也是一个小标题
  ---------------------

  > 引用文本

  `- ` 或 `* ` 用于项目符号列表, 而 `# ` 用于编号列表.
  ``` 或锁进两个空格表示代码。
  对文字块使用 %%%。
  使用 | ... | ... 表示表格。

= 基本样式 =

按如下方法格式化 **基本文本样式** :

  **加粗文本**
  //斜体文本//
  `等宽文本`
  ##等宽文本##
  ~~删除的文本~~
  __下划线文本__
  !!高亮显示的文本!!

这些将分别生成 **加粗文本**, //斜体文本//, `等宽文本`, ##等宽文本##, 
~~删除的文本~~, __下划线文本__, 和 !!高亮显示的文本!!
。

= 布局 =

像这样生成 **标题**:

  = 大标题 =

  == 小标题 ==

  ===== 非常小的标题 =====

  同样是大标题
  ======================

  同样是小标题
  ------------------------

您可以选择省略尾随的 `=` 符号 -- 也就是说，这些是相同的：

  == 小标题 ==

  == 小标题

这会产生类似本文档中的标题。 确保您在标题之前和之后有一个空行。

列表
=====

通过在每个条目前添加 `-` 或 `*` 可以生成**列表**：

  lang=text
  - 牛奶
  - 鸡蛋
  - 面包

  * 鸭
  * 鸭
  * 鹅

这将产生如下列表：

  - 牛奶
  - 鸡蛋
  - 面包

(注意，你需要在 `-` 或 `*` 之后添加一个空格。)

可以通过 `#` 替换 `-` 或 `*` 生成有序列表：

  # Articuno
  # Zapdos
  # Moltres

有序列表也可以以 `1.` 或 `1)` 开头。 
如果你使用一个不是`1`的数字，列表将从该数字开始。 例如：

```
  200) 好
  201) 已创建
  202) 已接收
```

...生成:

  200) 好
  201) 已创建
  202) 已接收

您还可以嵌套列表:

```- 身体
  - 头
  - 手臂
    - 手肘
    - 手掌
      # 拇指
      # 食指
      # 中指
      # 无名指
      # 小指
  - 腿
    - 膝盖
    - 脚```

...产生:

  - 身体
    - 头
    - 手臂
      - 手肘
      - 手掌
        # 拇指
        # 食指
        # 中指
        # 无名指
        # 小指
    - 腿
      - 膝盖
      - 脚

如果愿意，您可以使用多个字符缩进列表以显示缩进深度，如下所示：

```- 树
-- 树枝
--- 枝条```

如预期，这产生：

- 树
-- 树枝
--- 枝条

您可以通过使用 `[]` 或 `[X]` 前缀来为项目添加复选框，如下所示：

```
  - [X] 预热烤箱至450度。
  - [ ] 调35柠檬。
```

当呈现时，这产生:

  - [X] 预热烤箱至450度。
  - [ ] 调35柠檬。

过缩进两个空格来创建**代码块**：

  f(x, y);

您还可以使用三个反引号包围代码块：

  ```f(x, y);
  g(f);```

您可以使用`lang = xxx`指定语法高亮的语言：

  lang=text
  lang=html
  <a href="#">...</a>


如果有可用的高亮工具，代码块将被高亮为指定的语言。
（在大多数情况下，这意味着您需要配置 Pygments）


  lang=html
  <a href="#">...</a>

你也可以使用 `COUNTEREXAMPLE` 头来表示一段代码是坏的，不应该被复制：

  lang=text
  COUNTEREXAMPLE
  function f() {
    global $$variable_variable;
  }

这将产生一个这样的块：

  COUNTEREXAMPLE
  function f() {
    global $$variable_variable;
  }

你可以使用 `lines=N` 限制一段代码的垂直尺寸，
`name=some_name.ext`来给它一个名字。 例如：

  lang=text
  lang=html, name=example.html, lines=12, counterexample
  ...

...产生这个:

  lang=html, name=example.html, lines=12, counterexample
  <p>Apple</p>
  <p>Apricot</p>
  <p>Avocado</p>
  <p>Banana</p>
  <p>Bilberry</p>
  <p>Blackberry</p>
  <p>Blackcurrant</p>
  <p>Blueberry</p>
  <p>Currant</p>
  <p>Cherry</p>
  <p>Cherimoya</p>
  <p>Clementine</p>
  <p>Date</p>
  <p>Damson</p>
  <p>Durian</p>
  <p>Eggplant</p>
  <p>Elderberry</p>
  <p>Feijoa</p>
  <p>Gooseberry</p>
  <p>Grape</p>
  <p>Grapefruit</p>
  <p>Guava</p>
  <p>Huckleberry</p>
  <p>Jackfruit</p>
  <p>Jambul</p>
  <p>Kiwi fruit</p>
  <p>Kumquat</p>
  <p>Legume</p>
  <p>Lemon</p>
  <p>Lime</p>
  <p>Lychee</p>
  <p>Mandarine</p>
  <p>Mango</p>
  <p>Mangostine</p>
  <p>Melon</p>

您可以使用 `NOTE:`，`WARNING:` 或 `IMPORTANT:` 生成提醒文本块。


例如，写这个：

```
NOTE: Best practices in proton pack operation include not crossing the streams.
```

...生成:

NOTE: Best practices in proton pack operation include not crossing the streams.

使用 `WARNING:` 或 `IMPORTANT:` 在行的开头改变
颜色的标注：

WARNING: Crossing the streams can result in total protonic reversal!

IMPORTANT: Don't cross the streams!

此外, 也可以使用 `(NOTE)`, `(WARNING)`, 或 `(IMPORTANT)` 达到同样的效果
但是在显示文本中不能出现 `(NOTE)`, `(WARNING)`, 或 `(IMPORTANT)` 。
例如此标注使用 `(NOTE)`:

(NOTE) Dr. Egon Spengler is the best resource for additional proton pack
 questions.


分隔线
========

您可以通过自己在一行上放置三个或更多的破折号来分割部分。 
这将创建一个类似于`<hr />` 标签的分隔符或水平分割线，如下所示：


---

短划线需要显示在自己的行上，并与其他内容分开。 例如，像这样：

```
此部分将在视觉上分开。

---

在一个完全不同的主题, ...
```


= 链接地址 =

网址会自动生成链接: http://phabricator.org/

如果网址里有特殊的字符，如
"`http://comma.org/,`", 可以使用尖括号包括它:

  <http://comma.org/,>

这将强制解析器使用网址: <http://comma.org/,>

您还可以创建命名链接，指定需要显示的文本。 Phabricator 内部相对地址或互联网网址都可以：


  [[/herald/transcript/ | Herald Transcripts]]
  [[http://www.boring-legal-documents.com/ | exciting legal documents]]

Markdown 的链接也支持:

  [Toil](http://www.trouble.com)

= 连接到对象 =

您可以通过提及对象的名称来链接到 Phabricator 对象，
例如 Differential 修订，Diffusion 提交和 Maniphest 任务：

  D123          # 链接到 Differential 修订 D123
  rX123         # 链接到 "X" SVN 仓库的 123 提交
  rXaf3192cd5   # 链接到 "X" Git 仓库的  "af3192cd5..." 提交
                # 必须至少指定哈希值中七个字符
  T123          # 链接到 Maniphest 任务 T123

您还可以直接链接到 Maniphest 和 Differential 中的评论：

  T123#4        # 链接到 T123 中的 #4 评论

请参阅 Phabricator 配置设置 `remarkup.ignored-object-names` 可以修改此行为。


= 嵌入对象

您还可以使用大括号来生成对某些对象的全名引用：

  {D123}        # 以全名方式链接到 Differential 修订 D123
  {T123}        # 以全名方式链接到 Maniphest 修订 T123 

这些引用还将显示对象状态变更（例如，任务或修订版本已关闭）。 
一些类型的对象支持丰富的嵌入。

== 链接到项目标签

项目可以使用＃标签链接。 默认情况下使用项目的名称（小写，下划线）工作。 
此外，您可以通过编辑项目详细信息设置多个其他主题标签。

  #qa, #quality_assurance

== 嵌入 Mocks (Pholio)

You can embed a Pholio mock by using braces to refer to it:

  {M123}

By default the first four images from the mock set are displayed. This behavior
can be overridden with the **image** option. With the **image** option you can
provide one or more image IDs to display.

You can set the image (or images) to display like this:

  {M123, image=12345}
  {M123, image=12345 & 6789}

==  嵌入 Pastes

可以使用大括号嵌入 Paste:

  {P123}

您可以使用`lines`选项调整嵌入高度：

  {P123, lines=15}

可以使用`highlight`选项突出显示特定行：

  {P123, highlight=15}
  {P123, highlight="23-25, 31"}

== 嵌入图片

您可以使用大括号来引用图片或其他文件：

  {F123}

在大多数界面中，您可以将图片从计算机拖放到文本区域，以便上传和引用。

某些浏览器（例如 Chrome）支持通过将图片数据从剪贴板粘贴到文本区域来上传图片数据。

您可以像这样设置文件显示选项：

  {F123, layout=left, float, size=full, alt="a duckling"}

所有文件的有效选项是：

  - **layout** left (默认), center, right, inline, link (渲染为图像链接而不是缩略图
)
  - **name** 用于 `layout=link` 或非图片文件, 作为链接文本
  - **alt** 替代文本。

图像文件支持这些选项:

  - **float** 如果布局设置为左或右，图像将浮动，所以文本环绕它。
  - **size** thumb (默认), full
  - **width** 将图像缩放到特定宽度。
  - **height** 将图像缩放到特定高度。

音频和视频文件支持这些选项:

  - **media**: 将媒体类型指定为 `audio` 或 `video`。 
    这允许您消除可能包含音频或视频的文件格式应如何渲染的歧义。
  - **loop**: 循环此媒体。
  - **autoplay**: 自动开始播放此媒体。

== 嵌入 Countdowns

可以使用大括号嵌入 countdown:

  {C123}

= 引用文本 =

要引用文本，添加 `>` 前缀:

  > 这是引用文本

这将显示为:

> 这是引用文本

= 嵌入媒体 =

如果您设置了配置标志，则可以直接在文本中嵌入媒体：

  - **remarkup.enable-embedded-youtube**: 允许您粘贴 YouTube 视频，并让他们在线呈现。

默认情况下禁用此选项，因为它具有安全性和/或愚蠢的含义。 在启用它之前仔细阅读说明。

= 图片宏 =

您可以上传图片宏（More Stuff -> Macro），将用您指定的图片替换文本字符串。
例如，您可以上传一张跳舞香蕉的图片以创建一个名为 “peanutbutterjellytime” 的宏，
然后任何时候您在单独的行上键入该字符串，它将被跳舞的香蕉的图像替换。

= Memes =

您还可以在表情的上下文中使用图像宏。 例如，如果你
有一个名为 `grumpy` 的图像宏，你可以通过如下方式创建一个表情：


  {meme, src = grumpy, above = toptextgoeshere, below = bottomtextgoeshere}

默认情况下，用于创建表情文本的字体是 `tuffy.ttf`。 
对于 `impact.ttf` 的更真实的感觉，你只需要将 Impact TrueType 字体
放在 Phabricator 子文件夹 `/resources/font/` 中。 
如果 Remarkup 检测到 `impact.ttf` 的存在，它会自动使用它。

= 提及用户 =

在 Differential 和 Maniphest 中，你可以按如下方式提及另一个用户 ：

  @username

当您提交您的评论时，如果他们没在 CC 列表中，它会将它们添加到修订或任务的 CC 列表中。

图标
=====

您可以使用`{icon ...}`语法将图标添加到评论。 例如：

  {icon camera}

渲染为: {icon camera}

您可以为图标选择颜色：

  {icon camera color=blue}

渲染为: {icon camera color=blue}

有关可用图标和颜色的列表，请查看 UIExamples 应用程序。 
（图标来源于[[http://fortawesome.github.io/Font-Awesome/ | FontAwesome]]，所以你也可以浏览那里的集合。）

你可以添加 `spin` 使图标旋转：

  {icon cog spin}

渲染为: {icon cog spin}


= Phriction 文档 =

您可以使用名称或路径链接到 Phriction 文档：

  Make sure you sign and date your [[legal/Letter of Marque and Reprisal]]!

默认情况下，链接将显示文档标题作为链接名称。 
使用管道（`|`），您可以重命名链接。 使用它来误导你的对手：

  Check out these [[legal/boring_documents/ | exciting legal documents]]!

指向不存在的页面的链接以红色显示。 
指向存在但是查看者没有权限查看的页面的链接显示有锁定图标，并且该链接不会显示页面标题。

如果你使用 `./` 或 `../` 开始一个链接路径，路径的其余部分将相对于当前的 wiki 页面。 
例如，如果您正在为文档 `fruit/` 编写内容，
则链接到 `[[./guava]]` 的链接与来自其他地方的 `[[fruit/guava]]` 链接相同。

相对链接可以使用 `../` 来指向上级路径。 
从 `produce/vegetables/` 页面，
您可以使用 `[[../fruit/guava]]` 链接到 `produce/fruit/guava` 页面。

当在 wiki 页面之外使用时，相对链接不工作。 
例如，您不能在任务的注释中使用相对链接，因为没有合理的位置让链接开始解析。

当移动文档时，相对链接不会自动更新：它们保留为当前写入的。 
移动文档后，您可能需要查看和调整文档包含的任何相关链接。


= 文字块 =

要在文字块中放置文本，请使用`%%%`：

  %%%文本不会被 remarkup 处理
  [[http://www.example.com | example]]
  %%%

Remarkup 不会处理文本块中的文本（除了转义 HTML 并保留换行符）。

= 表格 =

Remarkup 支持简单的表格法。 例如：
```
| Fruit  | Color  | Price   | Peel?
| -----  | -----  | -----   | -----
| Apple  | red    | `$0.93` | no
| Banana | yellow | `$0.19` | **YES**
```

...生成:

| Fruit  | Color  | Price   | Peel?
| -----  | -----  | -----   | -----
| Apple  | red    | `$0.93` | no
| Banana | yellow | `$0.19` | **YES**

Remarkup 还支持简化的 HTML 表格语法，例如：
```
<table>
  <tr>
    <th>Fruit</th>
    <th>Color</th>
    <th>Price</th>
    <th>Peel?</th>
  </tr>
  <tr>
    <td>Apple</td>
    <td>red</td>
    <td>`$0.93`</td>
    <td>no</td>
  </tr>
  <tr>
    <td>Banana</td>
    <td>yellow</td>
    <td>`$0.19`</td>
    <td>**YES**</td>
  </tr>
</table>
```

...produces this:

<table>
  <tr>
    <th>Fruit</th>
    <th>Color</th>
    <th>Price</th>
    <th>Peel?</th>
  </tr>
  <tr>
    <td>Apple</td>
    <td>red</td>
    <td>`$0.93`</td>
    <td>no</td>
  </tr>
  <tr>
    <td>Banana</td>
    <td>yellow</td>
    <td>`$0.19`</td>
    <td>**YES**</td>
  </tr>
</table>

关于此语法的一些说明：

  - your tags must all be properly balanced;
  - 标签不能包含属性 (`<td>` 可以, `<td style="...">` 不可以);
  - 可以在单元格中使用其他的 Remarkup 规则，（像 **bold**, //italics// 等）

导航序列
====================

你可以使用`{nav ...}`来渲染一个风格化的导航序列，
以帮助某人定位某个东西。 这在编写文档时很有用。 
例如，您可以给某人指示购买柠檬：

{nav icon=home, name=Home >
Grocery Store >
Produce Section >
icon=lemon-o, name=Lemons}

要渲染此示例，请使用此标记:

```
{nav icon=home, name=Home >
Grocery Store >
Produce Section >
icon=lemon-o, name=Lemons}
```

一般来说:

  - 用 `>` 分隔各个节点
  - 每个部分只需要一个名称即可将元素添加到导航序列中，或者键值对的列表。
  - 支持 `icon`, `name`, `type` 和 `href` 属性
  - `type` 选项可以设置为 `instructions` 来表示一个元素要求用户做出选择或者遵循特定的指令。

按键
==========

可以用 `{key ...}` 渲染一个按键样式。比如:

```
Press {key M} to view the starmap.
```

...渲染为:

> Press {key M} to view the starmap.

您还可以使用修饰键来渲染序列，这样：

```
使用 {key command option shift 3} 截图.
Press {key down down-right right LP} to activate the hadoken technique.
```

...渲染:

> 使用 {key command option shift 3} 截图.
> Press {key down down-right right LP} to activate the hadoken technique.


= 全屏模式 =

Remarkup 编辑器提供全屏幕写作模式。 这可以使编辑大块文本变得更容易，
或者通过排除干扰来提高注意力。 您可以再次点击按钮或按退出键，退出**全屏模式**。