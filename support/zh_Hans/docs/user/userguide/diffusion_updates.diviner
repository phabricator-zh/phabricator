@title Diffusion 用户指南: 仓库更新
@group userguide

说明 Diffusion 如何更新仓库以发现新的更改。

概览
========

当 Phabricator 配置为导入托管在其他位置的仓库时，它需要轮询这些仓库以进行更改。 
如果它太频繁地轮询，可能在本地和远程服务上产生过多的负载。 
如果它太少的轮询，提交可能需要很长时间才能显示在 Web 界面。

本文档描述了轮询的规则以及如何理解和调整。 一般来说：

  - Phabricator 根据仓库活跃情况选择默认轮询间隔。 
  	这些时间间隔范围从 15秒（对于活跃仓库）到6小时（对于在两个月内没有提交的仓库）。
  - 如果使用 `arc` 推送提交，或者在 Phabricator 上托管仓库，
  	仓库在推送更改后自动更新。
  - 如果不使用 `arc` 并且您的仓库托管在其他地方，本文档描述了您可以使轮询提高响应性的方法。


默认行为
================

默认情况下，Phabricator 通过检查自上次提交以来的时间长度来确定轮询仓库的频率。 
在大多数情况下，这是相当准确的，可以产生良好的行为。 
特别地，它自动减少了很少使用的仓库的轮询频率。 
这大大减少了大量非活动仓库的带来的负载。

对于在过去3天内具有活动的仓库，我们每10分钟无活动等待1秒钟。 
下面的表格有一些例子。

| 自提交以来的时间 | 拉取间隔   |
|-------------------|------------------|
| //最小值//       | 15 秒       |
| 6 小时           | 大约 30 秒 |
| 12 小时          | 大约 1 分钟   |
| 1 天            | 大约 2 分钟  |
| 2 天            | 大约 5 分钟  |
| 3 天            | 大约 7 分钟  |

这意味着您在早上导入第一个提交，可能需要等待大约2分钟，在周末提交后大约要等5分钟，
但是通常应在30秒或更少时间内识别对活动知识库的其他提交。

对于在过去3天没有活动的仓库，我们在更新之间等待更长时间（每4分钟无活动1秒）。 
下面的表格有一些例子。

| 自提交以来的时间 | 拉取间隔    |
|-------------------|------------------|
| 4 天            | 大约 30 分钟 |
| 7 天            | 大约 45 分钟 |
| 10 天           | 大约 1 小时     |
| 20 天           | 大约 2 小时    |
| 30 天           | 大约 3 小时    |
| //最大值//       | 6 小时          |

您可以在“更新频率”下的 “Diffusion>（选择仓库）>编辑仓库”中找到仓库的确切默认轮询频率。 
您还可以在此界面中查看仓库上次更新的时间。

当前导入的仓库始终以最小更新频率更新，因此导入将尽快完成。


触发仓库更新
=============================

如果您希望 Phabricator 以比默认更新频率更快的速度更新仓库（例如，因为您刚刚提交了一个提交），
您可以告诉 Phabricator 它应该尽快安排更新。 

有几种方法可以做到这一点：

  - 如果你用 `arc land `或 `arc commit` 推送更改，这将是自动完成的。 
  	这些提交通常应在几秒钟内被识别。
  - 如果您的仓库托管在 Phabricator 上，这也将为您自动完成。
  - 您可以点击 Web界面中的 Diffusion>（选择仓库）>管理仓库>状态>立即更新 中立即执行计划更新。
  - 你可以调用 Conduit API 方法 `diffusion.looksoon`。 
  	这提示 Phabricator 它应该尽快轮询仓库。所有其他机制都是通过此接口实现的。

特别是，你可以添加一个提交钩子到你的外部仓库，调用 `diffusion.looksoon`。 
这应该使外部仓库与托管仓库一样响应。

如果仓库安排了更新，则 Diffusion>（选择仓库）>编辑仓库 接口将显示仓库已确定优先级，
并将很快更新。

更新故障排除
=======================

您可以从命令行手动运行仓库更新以解决问题，使用 `--trace` 标志获取完整的详细信息：

  phabricator/ $ ./bin/repository update --trace <repository>

要捕获潜在的权限问题，请以与守护程序运行的用户相同的用户身份运行此命令。

下一步
==========

接下来：

  - 通过
    @{article:Troubleshooting Repository Imports} 深入了解故障排除。
