@title 用户手册: 代码审查和审计
@group userguide

讨论 审查（Review）和 审计（Audit）工作流程之间的差异。

= 概览 =

Phabricator支持两个类似但独立的代码评审工作流程：

  - **Differential**用于代码推送前审查，在文档的其他地方称为 “审查”。 
  	您可以在 @{article:Differential 用户指南} 中了解更多。
  - **Audit** 用于代码推送后审核，在文档的其他地方称为 “审计”。 
  	您可以在 @{article:Audit User Guide} 中了解更多。

（使用 “推送前”，意味着阻止更改部署的审核， 而“推送后”，意味着在更改部署之后发生的审核。）

两者都是轻量级的，基于网页的异步工作流程，审查者/审计员独立地从自己的机器检查代码，
而不是作者和审阅者在会上亲自讨论更改的同步审核。

= 审查的优点 =

推送前审查比推送后审计要强大的多。在推送前审查修改，有以下优点：

  - 作者有强烈的动机来创造小的，组织良好的修改，
    这样的修改容易阅读、解释、方便提供合适的测试计划、覆盖率测试和上下文。
  - 审查人能真正的有一个机会，在审查中对架构或方法提出重要建议。
  	这些建议通常在审计中不会引起注意，如果推送之后很长时间才进行审计，这些建议将变的很难被采纳。
  - 作者有强烈的动机来解决问题并回应审查期间收到的反馈，因为审查阻止了他们的下一步行动。 
  	作者对于解决审计中提出的问题有较弱的动机。
  - 作者可以要求审查者在推送之前应用和验证修订。
  - 作者可以很容易地提前反馈，并获得方法或方向上的指导。
  - 因为有机会提前熟悉和理解代码，审查人员可以更好地为在生产环境中支持给定的变更做准备。
  - 审查人员能够捕获自动化测试可能难以检测的问题。 
    例如，人工审查人员能够推测出测试可能容易错过的性能问题，因为测试运行在小数据集上并且存根服务调用。
  - 在发生变化//之前//进行沟通可以进行更充分的准备。

审查的理论成本是它通过在过程中引入阻塞步骤来减缓开发，并且通常浪费可能更好地用于开发的开发者时间。 
这和显示并不相符，因为成本低，并可以通过其他方式补救回来：

  - Differential 是快速的，并提供了一个用于提交代码进行审查和执行审查的，非常轻量级的过程，。
  - 作者可以在审查代码时自由地进行其他更改。 通过适当的变更管理（如 Git中 利用本地分支），
  	他们甚至可以轻松地进行依赖变更。即使单个更改在获得批准之前被阻止，作者也很少会在审查时被阻止。
  - 工作流作为一个整体是轻量级的，通过熟练的审阅者可以有效地识别错误。 
  	在审查过程中修复错误通常比在生产环境中更快。
  - 更重要的是，它能有效地确定了架构和方法上问题。 这些都是免费修复的（“不要这样做，这是一个坏主意”），
  	但在生产环境中修复可能是非常耗时的。不管你的测试套件多么好，
	它不能识别由于缺少上下文或错误沟通而导致差的解决方案，
	或者这些解决方案就是些糟糕的想法而已。
  - 太大或太复杂更改，通常无法快速审查。 
  	几乎所有的大修改都可以分解成小的，独立的部分，这样更容易理解和测试。 
	审查往往鼓励更小和组织良好的修改。
  - 审查可以与静态分析集成，静态分析可以检测（并且在许多情况下纠正）
  	诸如语法、格式、命名约定、样式问题、拼写错误和一些程序错误之类的机械问题，
    这减少了审核代码所需的时间，意味着审查者可以专注于代码的实际问题，
  	而不是小的样式风格问题。
  - 审查创建了关于为什么进行更改的上下文和意图信息的永久记录，
  	通常比只有提交信息提供了更多的信息（作者有动机在发送更改以进行审查时适当地解释更改）。 
	这使得以后理解代码，在出现问题时响变更应更容易。
  - 使用 `arc patch`，从Differential中拉出一个变更，就像将从远端服务器拉出一样容易。

= 审计的优点 =

推后评审总比没有要好。 如果你没有被上述论点所束缚（或者在一个没有流动的团队工作），
审计提供了审查的没有的一些好处，同时减少摩擦：

  - 审计完全由 Phabricator 驱动，用户不需要安装`arc`。
  - 现有工作流程几乎不需要调整和同时需要极少量的培训。
  - 审计完全无阻塞，并且发送的通知数量少于审核。
  - 即使您已进行有审核，审计也可作为补充，以便对重要性较低的更改进行标记，或提出审核后发现的问题。

= 建议 =

这里是来自代码审查软件开发人员的极具偏见的建议：

  - 如果你可以做审查，就做吧。 随着组织规模的不断增长，对不重要的修改其可以进行审计。
  - 如果您无法立即进行审查，可以先设置审计并尝试逐渐向审查过渡。 
  	一些类型的更改（例如暂时的更改或对代码的反馈请求）是很适合审查的，
	可以作为更广泛被接受的垫脚石。 对工具集的更好的熟悉也可以促进对审查的更多接受，
	并且随着组织规模（例如，一旦你招入实习生），审查的价值可能变得更加明显。
  - 如果你对审查不感兴趣，选择进行审计就好了。 
  	你可以随时改变主意。 但请认证考虑代码审查！ 这真的很好，我们保证！

= 下一步 =

  - 通过 @{article:Differential 用户指南} 更多地了解代码审查; 或
  - 阅读 @{article:Audit User Guide} 更多地了解代码审计。
