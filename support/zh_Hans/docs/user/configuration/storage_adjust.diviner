@title 管理存储调整
@group config

说明如何对 MySQL 架构应用存储调整。

概览
========

Phabricator 使用一种称为 //存储调整// 的工作流来对 MySQL 模式进行
一些微小的修改。 此工作流补充了执行主要的修改的//存储升级//工作流。

要执行存储调整，可以运行：

  phabricator/ $ ./bin/storage adjust

本文档描述了这些调整是什么，同存储升级的关系，以及如何执行它们
和存储调整过程中的故障排除。


理解这些调整
===================

存储调整对 Phabricator MySQL 模式进行微小的修改，
以保证一致性、编码处理和性能。所涵盖的变化调整包括：

  - 列，表和数据库的字符集设置。
  - 设置和移除列的 "Auto Increment"。
  - 添加、移除、重命名和调整键值。

调整不会对模式进行重大更改，例如创建或删除列、表或迁移数据。 
（主要变更在升级工作流程进行。）

调整从升级过程中分离出来是因为调整依赖于数据库版本，但是升级不依赖。
升级 MySQL 后，将会有更好的字符集可用，调整流程能转换模式使用它们。

调整涵盖的所有更改都是次要的，在技术上是可选的。 然而，
强烈鼓励您应用未完成的调整：如果您不这样做，
您可能会在存储或排序一些 unicode 数据遇到问题，
或导致某些查询性能较差。


检查未完成调整
=================================

有两种方式可以检查未完成的调整：使用网页界面或命令行。

要访问网络用户界面，请导航至 {nav Config > 数据库状态} 或
{nav Config > 数据库问题}。//数据库状态// 提供所有模式的一般概览。
//数据库问题// 显示了未解决的问题。

这些接口报告的//错误//，是调整无法解决的严重问题，
//警告// 是调整工作流可以解决的小问题。

通过命令行检查调整，可以运行：

  phabricator/ $ ./bin/storage adjust
  
在提示你应用调整前，你将得到一个可用调整的列表。
之后你可以选择是否应用它们。


性能调整
======================

要执行调整，运行 `adjust`：

  phabricator/ $ ./bin/storage adjust

有关标志的详细信息，请使用:

  phabricator/ $ ./bin/storage help adjust

通常，您不需要手动运行此工作流：它将在您运行`更新`工作流程后自动运行。


历史与根据
=====================

调整工作流的主要动机是 MySQL 对 unicode 字符集的处理。
MySQL 5.5 之前，MySQL 支持 `utf8` 字符集。然而
此字符集不能存储四子节的 unicode 字符（包括 emoji）。
在 `utf8` 列插入四子节的字符将会截断数据。

MySQL 5.5 引入了一个新的字符集 `utf8mb4`。
这个字符集可以安全地存储四子节 unicode 字符。

调整工作流让我们修改主要在旧版 MySQL 使用的 `binary` 字符集为
可以在新版 MySQL 使用的 `utf8mb4` 字符。最直接的效果是 Phabricator
可以一致地工作，无论 MySQL 是什么版本都可以存储四子节字符；我们可以充分
利用更好的 `utf8mb4` 的字符集规则。

调整工作流在2014年11月引入。如果你的安装早于引入时间，
你的第一次调整需要进行较长时间（我们需要将所有非`utf8`数据转换为合适的字符集）。
如果安装是在 2014年11月之后，调整一般来说很小，很快就能完成，
除非你执行一个MySQL 大版本升级，使得有新字符集可用。

如果你打算将 MySQL 从旧版本升级到 5.5 或更新版本，建议先进行升级，然后运行调整流程。
如果你先执行调整，安装之后还得需要调整，所以你最终需要执行调整所需的两倍时间。


故障排除
===============

应用调整时，某些调整可能失败。一些最常见的
您可能会遇到的错误是：


  - **#1406 数据太长**: 通常这是由很长的对象名称引起的
	（如任务标题），其中包含多字节 Unicode 字符。 
	当列类型转换为 `binary` 的时候，只有标题的第一部分仍然适合列。 
	根据失败提示信息，你可以在网页界面中找到相关对象，并重命名它，
	这样调整就可以成功了。或者，可以使用`--unsafe`强制调整为截断标题。 
	这将破坏一些数据，但通常这些数据并不是重要（只是非常长的标题的结尾）。
  	
  - **#1366 不正确的字符值**: 
	当转换无效或截断的多字节 unicode 字符转换为 unicode 字符集时，
	可能会发生这种情况。在这两种情况下，旧值都不能在新字符下表示。 
	您可以找出这些对象，并编辑它以允许调整继续，
	或者您可以使用 `--unsafe`  标志来在无效字符截断数据。 
	一般来说，截断的数据并不重要。

与大多数命令一样，您可以添加`--trace`标志以获取更多
关于`bin/storage adjust`正在做什么的详细信息。
这可以帮助您诊断或理解任何您遇到的问题，
这个数据很有用，可以提交到官方。

一般来说，调整并不重要。 如果你在调整中遇到问题，
可以在官方新建一个任务，描述你所有遇到的问题，然后继续正常使用 
Phabricator，直到这个问题被解决。


Surplus 模式
================

执行调整后，您可能会收到表或列为的错误
“Surplus”。 错误看起来像这样：

| 目标 | 错误 |
| --- | --- |
| phabricator_example.example_table | Surplus |

一般来说，"Surplus" 意味着 Phabricator 不希望存在这个表或列。
这些表或列通常都是你手动添加的。极少情况下，它们的存在会是其他原因。
它们通常可以安全地删除，但是删除会销毁数据，并且 Phabricator 不确定
这些表和列是否包含重要的数据，所以不会自动删除它们。 

如果你感觉遇到的问题是你添加的这些东西导致的，或者不再需要它们，
可以安全的删除它们。如果你不确定这些数据是不是自己添加的，可以将
数据移动到其他地方，稍后再删除它们。

移动数据表时，首先为它创建一个数据库例如 `my_backups`。
然后重命名数据表移动到那个数据库（使用错误中给出的表名）：

```lang=sql
CREATE DATABASE my_backups;
RENAME TABLE phabricator_example.example_table
  TO my_backups.example_table;
```

Phabricator 会忽略那些不再自己数据库中的表，所以你可以安全地将不使用的
任何东西移动到 Phabricator 的数据库外。

如果确定自己不再使用表，指定正确的表名（错误消息中给出的名称）
使用 `DROP TABLE` 销毁它：


```lang=sql
DROP TABLE phabricator_example.example_table;
```

这将永久销毁表。
